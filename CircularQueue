#include<iostream>
using namespace std;
#define TRUE 1
#define FALSE 0
#define MAXQUEUE 5
typedef struct queue
{
	int items[MAXQUEUE];
	int front,rear;
	
}queue;

void insert(queue *,int);
void display(queue *);
int deleteitem(queue *);
int empty(queue *);

void insert(queue *q,int ele)
{
	if((q->front==0 && q->rear==MAXQUEUE-1)||(q->front==(q->rear+1)))
	{
		cout<<"Queue Overflow\n";
	    exit(1);
	}
	if(q->front==-1 && q->rear==-1)
	{
		q->front=0;
		q->rear=0;
		
	}
	else if(q->rear=MAXQUEUE-1)
	{
		q->rear=0;
	}
	else{
		(q->rear)++;
	}
	q->items[q->rear]=ele;
	

}
int empty(queue *q)
{
	if(q->front=-1)
	{
		return true;
	}
	else{
		return false;
	}
}
int deleteitem(queue *q)
{
	int ele;
	if(empty(q))
	{
		cout<<"Queue Overflow\n";
		exit(1);
		
	}
	else{
		ele=(q->items[q->front]);
	if(q->front==q->rear)
	{
		q->front=-1;
		q->rear=-1;
	}
	else if(q->front=MAXQUEUE-1)
	{
		q->front=0;
	}
	else{
		q->front++;
		return ele;
	}
}
}
void display(queue *q)
{
	int i;
	if(!empty(q))
	{
		cout<<"\n";
		for(i=q->front;i!=q->rear;i=(i+1)%(MAXQUEUE))
		{
			cout<<q->items[i];
		}
		cout<<q->items[q->rear];
	}
	
}
int main()
{
	queue q;
	q.front=q.rear=-1;
	insert(&q,10);
	insert(&q,20);	
    insert(&q,30);
	insert(&q,40);
	display(&q);
	cout<<"\n deleted item is";
	delete(&q);
	delete(&q);
	delete(&q);
	insert(&q,50);
	insert(&q,60);
	display(&q);
	return 0;
	
}
