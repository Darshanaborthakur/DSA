#include<iostream>
#include<stack>
using namespace std;
int isOperator(char c){
	
	 if(c=='+'||c=='-'||c=='*'||c=='/'||c=='^')
	 {
	 	return true;
	 }
	 else{
	 	 return false;
	 }
}
int prec(char c)
{
	if(c=='^')
	{
		return 4;
	}
	else if(c=='*'||c=='/')
	{
		return 3;
	}
	else if(c=='+'||c=='-')
	{
		return 2;
		
	}
	else{
		return 1;
	}
}
string InfixtoPostfix(string infix)
{
	 stack <char> s;
	 string postfix;
	 for(i=0;i<infix.length();i++)
	 {
	 	if((infix[i]>='a'&&infix[i]<='z')|(infix[i]>='A'&&infix[i]<='Z'))
	 	{
	 		postfix=infix[i]; 
		 }
		 else if(infix[i]=='(')
		 {
		 	s.push(infix[i]);
		 }
		 else if(infix[i]==')')
		 {
		 	while(s.top()!='(')&&(s.empty())
		 	{
		 		char temp=s.top();
		 		postfix+=temp;
		 		s.pop();
			 }
		 }
	     else if(isOperator(infix[i]))
		 {
		 	if(s.empty())
		 	{
		 		s.push(infix[i]);
		 	}
		 	else
		 	{
		 		if(prec(infix[i])>( prec(s.top())))
		 		{
		 			s.push(infix[i]);
				 }
				 else if(prec(infix[i]==prec(s.top()))&&(infix[i]=='^'))
				 {
				 	s.push(infxi[i]);
				 }
				 else
				 {
				 	while((!s.empty())&&(prec(infix[i])<=prec(s.top())))
				 {
				 	char temp=s.top();
				 	postfix=temp;
				 	s.top();
				 }
				 s.push(infix[i];)
				 }
			 }
			 }
	 	
		 }
	 }
	 
while(!s.empty())
{
	postfix+=s.top();
	s.pop();
	
	}
	return postfix;
}
int main()
{
	string infix,postfix;
	cout<<"Enter an infix expression"<<endl;
	cin>>infix;
	stack <char> s;
	cout<<"Infix expression:"<<infix<<endl;
	postfix=InfixtoPostfix(s,infix);
	cout<<"Postfix expression:"<<postfix;
	return 0;
	
	
}
